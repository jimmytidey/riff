//grid is an array, where each element is the probability of a step playing, where a value of 1000 indicates that a sample should play, otherwise remain silent grid= new Array;for each (bank in jsonData['banks']) {			step_index = 0;	for each (step in jsonData['banks'][bank_index]['bank_options'][0]['sequence']) {					bank_option_index = 0;			//loop over each bank option and give a bunch of probabilities 			for each (bank_option in bank['bank_options']) {						play_prob = jsonData['banks'][bank_index]['bank_options'][bank_option_index]['sequence'][step_index];								//process a step which is very likely, but not certain 				if (play_prob > 0 && play_prob < 3) {					play_prob = play_prob * 25 * Math.random();  				}								if (play_prob == 3) {					play_prob = play_prob * 30 * ((Math.random()/3) + 0.6);  				}													grid[bank_index][step_index][bank_option_index] = play_prob; 			}						//go through all the options in this bank, and find the bank option with the highest value. If that value is over 20, play that option			if (this loop is for the last bank option to process) { 								//look for the highest value in these bank options 				for (bank_option_max_test in bank['bank_options']) {												current_step_value = grid[bank_index][step_number][bank_option_max_test];						//work out which of the bank options should play						if (current_step_value > max_value) {							max_value = current_step_value;							max_value_index = bank_option_index; 						} 					}				}								//if there are no values over 20, don't play anything				if (max_value > 20) {					grid[bank_index][step_number][max_value_index] = 1000;				}							}			bank_option_index++;		}		step_index++;	}	bank_index++;				}