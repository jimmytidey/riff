package {	import com.adobe.serialization.json.JSON;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;	import flash.events.*;	import flash.display.*; 	import flash.text.*; 		//this object as a container for everything. Has to extend movieclip to inherit the stage obejct	public class RandomSeedComposer extends MovieClip {				var _stage:Stage; // have to define this to pass the stage object around, how fucking stupid is that?				//holding all the date from reading the json		var jsonData:Object; //holds all the json data		var sounds:Array; // array for sound objects for each bank option 		var samples;		var allSounds;		var loader:URLLoader = new URLLoader();		var requester:URLRequest = new URLRequest();				//control objects 		var selectSteps:SelectSteps = new SelectSteps();		var calculateGrid:CalculateGrid = new CalculateGrid();		var soundObjects:SoundObjects = new SoundObjects();		var audioDropDown:AudioDropDown = new AudioDropDown(); 		var modifyStructure:ModifyStructure = new ModifyStructure(); 		var addControls:AddControls= new AddControls();		var globalSettings:GlobalSettings = new GlobalSettings();		var playBackObjects:PlayBackObjects = new PlayBackObjects();		var transport:Transport = new Transport();		var render:Render = new Render();		var saveJson:SaveJson = new SaveJson();						var grid_top = 140; //location for the top of all the grid stuff		var grid_left = 270;		public var soundContainer:Object = new Object();				public function RandomSeedComposer(stage:Stage):void {			_stage = stage;		}				public function init() {			while (_stage.numChildren > 0) {_stage.removeChildAt(_stage.numChildren-1);} //clear the stage 			loadJSON();		}		function loadJSON() {			var loadContext:LoadContext= new LoadContext();			addChild(loadContext);			project_info_location  = 'http://localhost:88/riff/html/mk2/projects/'+loadContext.userName()+'/'+loadContext.projectName()+'/list.json';			requester.url=project_info_location;			loader.load(requester);			loader.addEventListener(Event.COMPLETE, decodeJSON);			} 					function decodeJSON(event:Event) {							jsonData =JSON.decode(loader.data);			this.jsonData = jsonData;			calculateGrid.addEventListener("done", makeSoundObjects);			calculateGrid.buildGrid(jsonData, _stage, grid_top, grid_left);		}						function makeSoundObjects(obj) {			var parameters:Array = new Array();			parameters['sounds'] = soundObjects.soundContainer;			soundObjects.addEventListener("loaded", addArguments(drawInterface, [parameters]));			soundObjects.make(_stage, calculateGrid.cumulatuive_y_offset, grid_top, grid_left);		}				function drawInterface(event, parameters) {			globalSettings.addEventListener("changed", saveData);			audioDropDown.addEventListener("changed", saveData);			modifyStructure.addEventListener("changed", saveData);			addControls.addEventListener("changed", saveData);						transport.addEventListener("randomise", randomise);						processed_grid = selectSteps.renderPlayingSteps(jsonData, calculateGrid.grid, _stage, grid_top, grid_left);			transport.makeTransport(jsonData, processed_grid, parameters['sounds'],  _stage, grid_top, grid_left);						samples = playBackObjects.make(jsonData); 			audioDropDown.make(jsonData, parameters.sounds, samples, _stage, grid_top, grid_left);			modifyStructure.make(jsonData, _stage, grid_top, grid_left);			addControls.make(jsonData, _stage, grid_top, grid_left);			globalSettings.makeSettings(_stage, jsonData); 						trace(samples);			allSounds = parameters['sounds']; 			trace(allSounds);		}				function saveData(obj) {			saveJson.save(jsonData, _stage);			trace("dispatched for redraw", allSounds);			calculateGrid.removeEventListener("done", makeSoundObjects);			calculateGrid.buildGrid(jsonData, _stage, grid_top, grid_left);						addControls.make(jsonData, _stage, grid_top, grid_left);			audioDropDown.make(jsonData, allSounds, samples, _stage, grid_top, grid_left);			modifyStructure.make(jsonData, _stage, grid_top, grid_left);		}				function randomise(obj) { 			calculateGrid.removeEventListener("done", makeSoundObjects);			calculateGrid.buildGrid(jsonData, _stage, grid_top, grid_left);			selectSteps.renderPlayingSteps(jsonData, calculateGrid.grid, _stage, grid_top, grid_left);			trace('hi');		}						//some weird utility function 		function addArguments(method:Function, additionalArguments:Array):Function {			return function(event:Event):void {method.apply(null, [event].concat(additionalArguments));}		}					}}