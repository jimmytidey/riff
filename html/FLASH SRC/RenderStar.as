package {	import com.adobe.serialization.json.JSON;	import flash.display.*; 		//this object as a container for everything. Has to extend movieclip to inherit the stage obejct	public class RenderStar extends MovieClip {				var star_container:MovieClip = new MovieClip;		var left_position:int = 680; 		var top_position:int = 80; 				public function render(grid, _stage) {						while (this.star_container.numChildren > 0) {this.star_container.removeChildAt(this.star_container.numChildren-1);} 					var step:int = 0; 			var bank:int = 0; 			var cumulative_angle:Number = 0;  						for (bank in grid) {								var points:Array = []; 				var bank_total:int = 0;								for (bank_option in grid[bank][step]) {					for (step in grid[bank]) {											bank_total += grid[bank][step][bank_option]; 					}					points.push(bank_total/5);				}								var n:int = 0;  				var points_total:int = 0; 				var normalisation_factor; 								//normalise				for (n in points) {					points_total += points[n]; 				}								var numberOfPoints:int = points.length; 								normalisation_factor = numberOfPoints * 100 / points_total;								for (n in points) {					points[n] = points[n] ;					if (points[n] == 0) {						points[n] = 10;					}				}											var angle:Number = cumulative_angle; 				var angleBetweenPoints:Number =  Math.PI * 2 / numberOfPoints;				var x_pos:Number = 0; 				var y_pos:Number = 0; 				var radialDistance;								//put everything in a circle 				var circle:Shape = new Shape();				circle.graphics.lineStyle(3, 0x000000, 1);				circle.graphics.drawCircle(left_position, top_position, 75);				star_container.addChild(circle);								var polygon:Shape = new Shape();				polygon.graphics.beginFill(0xcccccc, 0.5); 								//move share to first point				x_pos = left_position + points[0] * Math.cos( angle )				y_pos = top_position + points[0] * Math.sin( angle )				polygon.graphics.moveTo(x_pos, y_pos);								//draw shape				var point; 				for (point in points) {					radialDistance = points[point];					x_pos = left_position + radialDistance * Math.cos( angle ) * 3;					y_pos = top_position + radialDistance  * Math.sin( angle ) * 3;					polygon.graphics.lineTo(x_pos, y_pos); 					angle += angleBetweenPoints;				}													polygon.graphics.endFill();								star_container.addChild(polygon);				cumulative_angle = cumulative_angle + Math.PI /3;			}			_stage.addChild(star_container);				} 	}}